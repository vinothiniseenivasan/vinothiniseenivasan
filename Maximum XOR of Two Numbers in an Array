Maximum XOR of Two Numbers in an Array




class Solution {
    class Node
    {
        int num;
        Node left;
        Node right;
       
        Node()
        {
           num =-1;
            left = null;
            right=null;
        }
    } 
     Node root;
   
    public int findMaximumXOR(int[] nums)
    {
        if(nums.length == 1)
        {
            return 0;
        }
       
       root = new Node();
       Node curr = root;
       for(int i=0;i<nums.length;i++)
       {
           curr = root;
          String str= convertbinary(nums[i],31);
          insert(nums[i],0,str,curr);
        
       }
      
        int max = Integer.MIN_VALUE;
      for(int i=0;i<nums.length;i++)
      {
           curr = root;
          String str= convertbinary(nums[i],31);
         int[] ans = new int[1];
              findpair(str,31,0,curr,ans); 
              max = Math.max(max,nums[i] ^ ans[0]);
          }
         
     
         return (max);

    }
     public String convertbinary(int n ,int m)
     {
         String temp = "";
         while(m > 0)
         {
             int x = (n%2);
             temp +=  (char)(x+'0');
             n=(n/2);
             m--;
         }
           String rev = "";
   
 for(int i = temp.length() - 1; i >= 0; i--)
 {
 rev = rev +temp.charAt(i);
 }
        return  rev;
     }
 public void   insert(int n,int pos,String str, Node curr)
 {
     if(pos == str.length())
     {
         curr.num=n;
         return;
     }
     char ch = str.charAt(pos);
     if(ch=='0')
     {
         if(curr.left == null)
         {
           curr.left = new Node();
         }
         insert(n,pos+1,str,curr.left);
     }
     else
     {
          if(curr.right == null)
         {
           curr.right = new Node();
         }
         insert(n,pos+1,str,curr.right);
     }
 }
 
 public void findpair( String str,int m,int pos ,Node curr,int[] ans)
 {
     if(pos == m)
    {
       ans[0]=curr.num;
        return;
    }
    if(str.charAt(pos) == '0')
    {
        // go right
        if(curr.right != null)
        findpair(str, m,pos+1 ,curr.right,ans);
        else
         findpair(str, m,pos+1 ,curr.left,ans);
    }
    else
    {
        if(curr.left != null)
        findpair(str, m,pos+1 ,curr.left,ans);
        else
         findpair(str, m,pos+1 ,curr.right,ans);
    }
 } 
}
